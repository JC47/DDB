DROP TABLE EMPLEADO;
DROP TABLE SALARIO;
DROP TABLE OBLIGACION;
SET serveroutput ON
SET LINESIZE 250;
COLUMN ID_EMP FORMAT 9999;
COLUMN NOMBRE FORMAT A30;
COLUMN RFC FORMAT A14;
COLUMN CURP FORMAT A18;
COLUMN DESCRIPCION FORMAT A15;
COLUMN CLAVE_EMPLEADO FORMAT A14;
COLUMN OBJECT_NAME FORMAT A20;
COLUMN STATUS FORMAT A8;
COLUMN TABLE_NAME FORMAT A12;
COLUMN TRIGGER_NAME FORMAT A20;

SELECT TRIGGER_NAME,TABLE_NAME,STATUS FROM USER_TRIGGERS WHERE TRIGGER_NAME LIKE '%VALIDA%';
SELECT OBJECT_NAME, STATUS FROM USER_OBJECTS WHERE OBJECT_TYPE='PROCEDURE';

CREATE TABLE EMPLEADO
 (ID_EMP NUMBER(9,0),
  NOMBRE VARCHAR2(80),
  RFC VARCHAR2(30),
  CURP VARCHAR2(20),
  DESCRIPCION VARCHAR2(20),
  CLAVE_EMPLEADO VARCHAR2(17)
);

CREATE TABLE SALARIO
 (ID_SAL NUMBER(9,0),
  MONTO VARCHAR2(30),
  DIAS NUMBER(6,0),
  FORMULA VARCHAR2(20)
);

CREATE TABLE OBLIGACION
 (ID_OB NUMBER(9,0),
  TEXTO VARCHAR2(50)
);

-- TRIGGERS
CREATE OR REPLACE TRIGGER VALIDA_DIAS
BEFORE INSERT ON SALARIO FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.DIAS > 15 THEN
      RAISE_APPLICATION_ERROR (-20001,'EL VALOR DEL CAMPO DIAS DEBE SER MENOR A 15');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER VALIDA_CURP
BEFORE INSERT ON EMPLEADO FOR EACH ROW
DECLARE
BEGIN
    IF NOT REGEXP_LIKE(:NEW.CURP,'^[A-Z][AEIOU][A-Z]{2}[0-9]{2}(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[HM](AS|BC|BS|CC|CS|CH|CL|CM|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B-DF-HJ-NP-TV-Z]{3}[0-9A-Z][0-9]$') THEN
      RAISE_APPLICATION_ERROR (-20001,'CURP MAL REALIZADA');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER VALIDA_RFC
BEFORE INSERT ON EMPLEADO FOR EACH ROW
DECLARE
BEGIN
    IF NOT REGEXP_LIKE(:NEW.RFC,'^[A-Z][AEIOU][A-Z]{2}[0-9]{2}(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[0-9A-Z]{3}$') THEN
      RAISE_APPLICATION_ERROR (-20001,'RFC MAL REALIZADO');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER VALIDA_CLAVE
BEFORE INSERT ON EMPLEADO FOR EACH ROW
DECLARE
  CLAVE VARCHAR2(5);
  RFC VARCHAR2(5);
BEGIN
    CLAVE := SUBSTR(:NEW.clave_empleado,5,3);
    RFC := SUBSTR(:NEW.RFC,1,3);

    IF NOT REGEXP_LIKE(:NEW.clave_empleado,'^[0-9]{4}[A-Z][AEIOU][A-Z][0-9a-fA-F]{5}$') THEN
      RAISE_APPLICATION_ERROR (-20001,'CLAVE MAL REALIZADO');
    END IF;

    IF NOT UTL_MATCH.EDIT_DISTANCE(CLAVE, RFC) <= 0   THEN
      RAISE_APPLICATION_ERROR (-20001,'LA CLAVE Y EL RFC NO COINCIDEN');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER VALIDA_TEXTO
BEFORE INSERT ON OBLIGACION FOR EACH ROW
DECLARE
BEGIN
    IF REGEXP_LIKE(:NEW.TEXTO,'(MV|NP|NB|mv|np|nb)') THEN
      RAISE_APPLICATION_ERROR (-20001,'EL TEXTO CONTIENE COMBINACIONES DE LETRAS PROHIBIDAS');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER VALIDA_MONTO
BEFORE INSERT ON SALARIO FOR EACH ROW
DECLARE
BEGIN
    IF NOT REGEXP_LIKE(:NEW.MONTO,'^\$\([0-9]{1,3}([\,][0-9]{3})*\.[0-9]{2}\)$') THEN
      RAISE_APPLICATION_ERROR (-20001,'MONTO ENVIADO EN EL FORMATO EQUIVOCADO');
    ELSE
      IF NOT REGEXP_LIKE(:NEW.MONTO,'^\$[0-9]{1,3}([\,][0-9]{3})*\.[0-9]{2}$') THEN
        RAISE_APPLICATION_ERROR (-20001,'MONTO ENVIADO EN EL FORMATO EQUIVOCADO');
      END IF;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER VALIDA_PARENTESIS
BEFORE INSERT ON SALARIO FOR EACH ROW
DECLARE
cadena SALARIO.FORMULA%TYPE := :NEW.FORMULA;
var VARCHAR2(5);
cadenapa VARCHAR2(5) := '(';
cadenapc VARCHAR2(5) := ')';
PA NUMBER := 0;
PC NUMBER := 0;
BEGIN
FOR i IN 1..LENGTH(cadena) LOOP
 var := substr(cadena,i,1);
 IF UTL_MATCH.EDIT_DISTANCE(var, cadenapa) <= 0   THEN
  PA := PA + 1;
 END IF;
 IF UTL_MATCH.EDIT_DISTANCE(var, cadenapc) <= 0   THEN
  PC := PC + 1;
 END IF;
END LOOP;
  IF NOT PA=PC THEN
  RAISE_APPLICATION_ERROR (-20001,'LOS PARENTESIS DE LA FORMULA NO ESTAN BALANCEADOS');
  END IF;
END;
/

--Procesos
CREATE OR REPLACE PROCEDURE GET_NAME_BY_MONTH(MES EMPLEADO.NOMBRE%TYPE) IS
  REGISTRO EMPLEADO.NOMBRE%TYPE;
  CURSOR CR1 IS SELECT NOMBRE FROM EMPLEADO WHERE (SUBSTR(CURP,7,2) = MES);
BEGIN
  OPEN CR1;
  LOOP
    FETCH CR1 INTO REGISTRO;
    EXIT WHEN CR1%NOTFOUND;
    DBMS_OUTPUT.put_line(REGISTRO);
  END LOOP;
  CLOSE CR1;
END;
/

CREATE OR REPLACE PROCEDURE GET_CAPICUA IS
  REGISTRO SALARIO.FORMULA%TYPE;
  VAR VARCHAR2(5);
  PA VARCHAR2(5) := '(';
  AUX VARCHAR2(5);
  AUX2 VARCHAR2(5);
  CAP NUMBER := 0;
  CURSOR CR1 IS SELECT MONTO FROM SALARIO;
BEGIN
  OPEN CR1;
  LOOP
    FETCH CR1 INTO REGISTRO;
    EXIT WHEN CR1%NOTFOUND;
    VAR := SUBSTR(REGISTRO,2,1);
    IF UTL_MATCH.EDIT_DISTANCE(VAR, PA) <= 0   THEN
      AUX := SUBSTR(REGISTRO,3,1);
      AUX2 := SUBSTR(REGISTRO,-5,1);
      IF UTL_MATCH.EDIT_DISTANCE(AUX, AUX2) <= 0   THEN
         CAP := CAP + 1;
      END IF;
    ELSE
      AUX := SUBSTR(REGISTRO,2,1);
      AUX2 := SUBSTR(REGISTRO,-4,1);
      IF UTL_MATCH.EDIT_DISTANCE(AUX, AUX2) <= 0   THEN
         CAP := CAP + 1;
      END IF;
    END IF;
  END LOOP;
  DBMS_OUTPUT.put_line('EMPLEADOS CON SALARIO CAPICUA: '||CAP);
  CLOSE CR1;
END;
/

CREATE OR REPLACE PROCEDURE GET_COMPUESTOS IS
  VAR VARCHAR2(5);
  ESPACIO VARCHAR2(5) := ' ';
  COMPUESTO NUMBER := 0;
  NE NUMBER:= 0;
  REGISTRO EMPLEADO.NOMBRE%TYPE;
  CURSOR CR1 IS SELECT NOMBRE FROM EMPLEADO;
BEGIN
  OPEN CR1;
  LOOP
    FETCH CR1 INTO REGISTRO;
    EXIT WHEN CR1%NOTFOUND;
    NE := 0;
    FOR i IN 1..LENGTH(REGISTRO) LOOP
     VAR := substr(REGISTRO,i,1);
     IF UTL_MATCH.EDIT_DISTANCE(VAR, ESPACIO) <= 0   THEN
      NE := NE + 1;
     END IF;
    END LOOP;
    IF NE > 2 THEN
      COMPUESTO := COMPUESTO + 1;
    END IF;
  END LOOP;
  DBMS_OUTPUT.put_line('EMPLEADOS CON NOMBRE/APELLIDO COMPUESTO: '||COMPUESTO);
  CLOSE CR1;
END;
/

--Probar procesos
BEGIN
GET_NAME_BY_MONTH('11');
END;
/

BEGIN
GET_CAPICUA;
END;
/

BEGIN
GET_COMPUESTOS;
END;
/

DECLARE
cadena VARCHAR2(100) := '$100,000.00';
var VARCHAR2(100);
cadenapa VARCHAR2(5) := '(';
cadenapc VARCHAR2(5) := ')';
PA NUMBER := 0;
BEGIN
FOR i IN 1..LENGTH(cadena) LOOP
 var := substr(cadena,i,1);
 IF UTL_MATCH.EDIT_DISTANCE(var, cadenapa) <= 0   THEN
  PA := PA + 1;
 END IF;
 IF UTL_MATCH.EDIT_DISTANCE(var, cadenapc) <= 0   THEN
  PC := PC + 1;
 END IF;
END LOOP;
  IF PA =PC THEN
  dbms_output.put_line('FORMULA CORRECTA');
  ELSE
  dbms_output.put_line('FORMULA INCORRECTA');
  END IF;
END;
/

DECLARE
cadena VARCHAR2(100) := 'Javier Calette Cornelio';
VAR VARCHAR2(5);
ESPACIO VARCHAR2(5) := ' ';
COMPUESTO NUMBER := 0;
BEGIN
FOR i IN 1..LENGTH(cadena) LOOP
 var := substr(cadena,i,1);
 IF UTL_MATCH.EDIT_DISTANCE(var, espacio) <= 0   THEN
  dbms_output.put_line('Espacio');
 END IF;
END LOOP;
END;
/


/*
--Finalmente se agregan las restricciones correctas
ALTER TABLE EMPLEADO ADD CONSTRAINT CURP_CONS CHECK (REGEXP_LIKE(CURP,'^[A-Z][AEIOU][A-Z]{2}[0-9]{2}(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[HM](AS|BC|BS|CC|CS|CH|CL|CM|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B-DF-HJ-NP-TV-Z]{3}[0-9A-Z][0-9]$'));
ALTER TABLE EMPLEADO ADD CONSTRAINT RFC_CONS CHECK (REGEXP_LIKE(RFC,'^[A-Z][AEIOU][A-Z]{2}[0-9]{2}(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[0-9A-Z]{3}$'));
ALTER TABLE EMPLEADO ADD CONSTRAINT CLAVE_CONS CHECK (REGEXP_LIKE(clave_empleado,'^[0-9]{4}[A-Z][AEIOU][A-Z][0-9a-fA-F]{5}$'));

ALTER TABLE SALARIO ADD CONSTRAINT Dias_CONS CHECK(dias < 15);
ALTER TABLE SALARIO ADD CONSTRAINT MONTO_CONS CHECK(REGEXP_LIKE(MONTO,'^\$\(?[0-9]{1,3}([\,][0-9]{3})*\.[0-9]{2}\)?$'));
ALTER TABLE SALARIO ADD CONSTRAINT Formula_CONS CHECK (REGEXP_LIKE(formula,'\(([^()]|(?R))*\)'));

ALTER TABLE OBLIGACION ADD CONSTRAINT Texto_CONS CHECK (NOT REGEXP_LIKE(texto,'(MV|NP|NB|mv|np|nb)'));



--INSERCION DE DATOS

INSERT INTO OBLIGACION VALUES (1,'Javier');
INSERT INTO OBLIGACION VALUES (2,'ENBIDIA');
INSERT INTO SALARIO VALUES (1,'$100,000.00',3,'((A)(B)');
INSERT INTO EMPLEADO VALUES (2,'Juan','CACJ961128H10','CACJ961128HMCLRV11','Descripcion','1995CACFFFF0');
--SELECT * FROM EMPLEADO WHERE REGEXP_LIKE(RFC,'^[A-Z][AEIOU][A-Z]{2}[0-9]{2}(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[0-9A-Z]{3}$')
--'^[A-Z][AEIOU][A-Z]{2}[0-9]{2}(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[0-9A-Z]{3}$'--RFC
--SELECT * FROM SALARIO WHERE REGEXP_LIKE(MONTO,'^\$\(?[0-9]{1,3}([\,][0-9]{3})*\.[0-9]{2}\)?$');
*/
